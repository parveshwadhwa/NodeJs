REST API --- JSON

GET /users --- HTML Document Render
GET /api/users -- List all users -- JSON

GET /api/users/1 -- Get the user with id 1
GET /api/users/2 -- Get the user with id 2
Dynamic route /api/users/:id

POST /api/users -- create a new user

PATCH /api/user/1 -- Edit the user with ID 1

DELETE /api/users/1 --- Delete the user with ID 1

************************************************************************************************

Middleware : Express is a routing and middleware web framework that has minimal functionality of its own: An Express application is essentially a series of middleware function calls.

Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the applicationâ€™s request-response cycle. The next middleware function is commonly denoted by a variable named next.

Middleware functions can perform the following tasks:

Execute any code.
Make changes to the request and the response objects.
End the request-response cycle.
Call the next middleware function in the stack.
If the current middleware function does not end the request-response cycle, it must call next() to pass control to the next middleware function. Otherwise, the request will be left hanging.

An Express application can use the following types of middleware:

Application-level middleware
Router-level middleware
Error-handling middleware
Built-in middleware
Third-party middleware

*********************************************************************************************************